
package okm;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OKMRepository", targetNamespace = "http://ws.openkm.com")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OKMRepository {


    /**
     * 
     * @return
     *     returns java.lang.String
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRepositoryUuid", targetNamespace = "http://ws.openkm.com", className = "okm.GetRepositoryUuid")
    @ResponseWrapper(localName = "getRepositoryUuidResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetRepositoryUuidResponse")
    public String getRepositoryUuid()
        throws DatabaseException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns okm.Folder
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMailFolder", targetNamespace = "http://ws.openkm.com", className = "okm.GetMailFolder")
    @ResponseWrapper(localName = "getMailFolderResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetMailFolderResponse")
    public Folder getMailFolder(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns java.lang.String
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUpdateMessage", targetNamespace = "http://ws.openkm.com", className = "okm.GetUpdateMessage")
    @ResponseWrapper(localName = "getUpdateMessageResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetUpdateMessageResponse")
    public String getUpdateMessage(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws DatabaseException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns okm.Folder
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCategoriesFolder", targetNamespace = "http://ws.openkm.com", className = "okm.GetCategoriesFolder")
    @ResponseWrapper(localName = "getCategoriesFolderResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetCategoriesFolderResponse")
    public Folder getCategoriesFolder(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns okm.Folder
     * @throws PathNotFoundException_Exception
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getThesaurusFolder", targetNamespace = "http://ws.openkm.com", className = "okm.GetThesaurusFolder")
    @ResponseWrapper(localName = "getThesaurusFolderResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetThesaurusFolderResponse")
    public Folder getThesaurusFolder(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns okm.Folder
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRootFolder", targetNamespace = "http://ws.openkm.com", className = "okm.GetRootFolder")
    @ResponseWrapper(localName = "getRootFolderResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetRootFolderResponse")
    public Folder getRootFolder(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param path
     * @param token
     * @return
     *     returns java.lang.String
     * @throws PathNotFoundException_Exception
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNodeUuid", targetNamespace = "http://ws.openkm.com", className = "okm.GetNodeUuid")
    @ResponseWrapper(localName = "getNodeUuidResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetNodeUuidResponse")
    public String getNodeUuid(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "path", targetNamespace = "")
        String path)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns okm.AppVersion
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAppVersion", targetNamespace = "http://ws.openkm.com", className = "okm.GetAppVersion")
    @ResponseWrapper(localName = "getAppVersionResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetAppVersionResponse")
    public AppVersion getAppVersion(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param path
     * @param token
     * @return
     *     returns boolean
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hasNode", targetNamespace = "http://ws.openkm.com", className = "okm.HasNode")
    @ResponseWrapper(localName = "hasNodeResponse", targetNamespace = "http://ws.openkm.com", className = "okm.HasNodeResponse")
    public boolean hasNode(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "path", targetNamespace = "")
        String path)
        throws AccessDeniedException_Exception, DatabaseException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns okm.Folder
     * @throws PathNotFoundException_Exception
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPersonalFolder", targetNamespace = "http://ws.openkm.com", className = "okm.GetPersonalFolder")
    @ResponseWrapper(localName = "getPersonalFolderResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetPersonalFolderResponse")
    public Folder getPersonalFolder(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns okm.Folder
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTrashFolder", targetNamespace = "http://ws.openkm.com", className = "okm.GetTrashFolder")
    @ResponseWrapper(localName = "getTrashFolderResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetTrashFolderResponse")
    public Folder getTrashFolder(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param uuid
     * @param token
     * @return
     *     returns java.lang.String
     * @throws PathNotFoundException_Exception
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNodePath", targetNamespace = "http://ws.openkm.com", className = "okm.GetNodePath")
    @ResponseWrapper(localName = "getNodePathResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetNodePathResponse")
    public String getNodePath(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "uuid", targetNamespace = "")
        String uuid)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns okm.Folder
     * @throws PathNotFoundException_Exception
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTemplatesFolder", targetNamespace = "http://ws.openkm.com", className = "okm.GetTemplatesFolder")
    @ResponseWrapper(localName = "getTemplatesFolderResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetTemplatesFolderResponse")
    public Folder getTemplatesFolder(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @throws PathNotFoundException_Exception
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws LockException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "purgeTrash", targetNamespace = "http://ws.openkm.com", className = "okm.PurgeTrash")
    @ResponseWrapper(localName = "purgeTrashResponse", targetNamespace = "http://ws.openkm.com", className = "okm.PurgeTrashResponse")
    public void purgeTrash(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws AccessDeniedException_Exception, DatabaseException_Exception, LockException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

}
