
package okm;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OKMAuth", targetNamespace = "http://ws.openkm.com")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OKMAuth {


    /**
     * 
     * @param permissions
     * @param nodePath
     * @param user
     * @param recursive
     * @param token
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "grantUser", targetNamespace = "http://ws.openkm.com", className = "okm.GrantUser")
    @ResponseWrapper(localName = "grantUserResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GrantUserResponse")
    public void grantUser(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "nodePath", targetNamespace = "")
        String nodePath,
        @WebParam(name = "user", targetNamespace = "")
        String user,
        @WebParam(name = "permissions", targetNamespace = "")
        int permissions,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param password
     * @param user
     * @return
     *     returns java.lang.String
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "login", targetNamespace = "http://ws.openkm.com", className = "okm.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "http://ws.openkm.com", className = "okm.LoginResponse")
    public String login(
        @WebParam(name = "user", targetNamespace = "")
        String user,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws AccessDeniedException_Exception, DatabaseException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param user
     * @param token
     * @return
     *     returns java.lang.String
     * @throws PrincipalAdapterException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMail", targetNamespace = "http://ws.openkm.com", className = "okm.GetMail")
    @ResponseWrapper(localName = "getMailResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetMailResponse")
    public String getMail(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "user", targetNamespace = "")
        String user)
        throws PrincipalAdapterException_Exception
    ;

    /**
     * 
     * @param nodePath
     * @param token
     * @return
     *     returns java.util.List<okm.IntegerPair>
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGrantedUsers", targetNamespace = "http://ws.openkm.com", className = "okm.GetGrantedUsers")
    @ResponseWrapper(localName = "getGrantedUsersResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetGrantedUsersResponse")
    public List<IntegerPair> getGrantedUsers(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "nodePath", targetNamespace = "")
        String nodePath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param nodePath
     * @param token
     * @return
     *     returns java.util.List<okm.IntegerPair>
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGrantedRoles", targetNamespace = "http://ws.openkm.com", className = "okm.GetGrantedRoles")
    @ResponseWrapper(localName = "getGrantedRolesResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetGrantedRolesResponse")
    public List<IntegerPair> getGrantedRoles(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "nodePath", targetNamespace = "")
        String nodePath)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param user
     * @param token
     * @return
     *     returns java.lang.String
     * @throws PrincipalAdapterException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getName", targetNamespace = "http://ws.openkm.com", className = "okm.GetName")
    @ResponseWrapper(localName = "getNameResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetNameResponse")
    public String getName(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "user", targetNamespace = "")
        String user)
        throws PrincipalAdapterException_Exception
    ;

    /**
     * 
     * @param role
     * @param token
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws PrincipalAdapterException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUsersByRole", targetNamespace = "http://ws.openkm.com", className = "okm.GetUsersByRole")
    @ResponseWrapper(localName = "getUsersByRoleResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetUsersByRoleResponse")
    public List<String> getUsersByRole(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "role", targetNamespace = "")
        String role)
        throws PrincipalAdapterException_Exception
    ;

    /**
     * 
     * @param role
     * @param permissions
     * @param nodePath
     * @param recursive
     * @param token
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "revokeRole", targetNamespace = "http://ws.openkm.com", className = "okm.RevokeRole")
    @ResponseWrapper(localName = "revokeRoleResponse", targetNamespace = "http://ws.openkm.com", className = "okm.RevokeRoleResponse")
    public void revokeRole(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "nodePath", targetNamespace = "")
        String nodePath,
        @WebParam(name = "role", targetNamespace = "")
        String role,
        @WebParam(name = "permissions", targetNamespace = "")
        int permissions,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws PrincipalAdapterException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRoles", targetNamespace = "http://ws.openkm.com", className = "okm.GetRoles")
    @ResponseWrapper(localName = "getRolesResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetRolesResponse")
    public List<String> getRoles(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws PrincipalAdapterException_Exception
    ;

    /**
     * 
     * @param role
     * @param permissions
     * @param nodePath
     * @param recursive
     * @param token
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "grantRole", targetNamespace = "http://ws.openkm.com", className = "okm.GrantRole")
    @ResponseWrapper(localName = "grantRoleResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GrantRoleResponse")
    public void grantRole(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "nodePath", targetNamespace = "")
        String nodePath,
        @WebParam(name = "role", targetNamespace = "")
        String role,
        @WebParam(name = "permissions", targetNamespace = "")
        int permissions,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param token
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws PrincipalAdapterException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUsers", targetNamespace = "http://ws.openkm.com", className = "okm.GetUsers")
    @ResponseWrapper(localName = "getUsersResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetUsersResponse")
    public List<String> getUsers(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws PrincipalAdapterException_Exception
    ;

    /**
     * 
     * @param permissions
     * @param nodePath
     * @param user
     * @param recursive
     * @param token
     * @throws RepositoryException_Exception
     * @throws PathNotFoundException_Exception
     * @throws DatabaseException_Exception
     * @throws AccessDeniedException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "revokeUser", targetNamespace = "http://ws.openkm.com", className = "okm.RevokeUser")
    @ResponseWrapper(localName = "revokeUserResponse", targetNamespace = "http://ws.openkm.com", className = "okm.RevokeUserResponse")
    public void revokeUser(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "nodePath", targetNamespace = "")
        String nodePath,
        @WebParam(name = "user", targetNamespace = "")
        String user,
        @WebParam(name = "permissions", targetNamespace = "")
        int permissions,
        @WebParam(name = "recursive", targetNamespace = "")
        boolean recursive)
        throws AccessDeniedException_Exception, DatabaseException_Exception, PathNotFoundException_Exception, RepositoryException_Exception
    ;

    /**
     * 
     * @param user
     * @param token
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws PrincipalAdapterException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRolesByUser", targetNamespace = "http://ws.openkm.com", className = "okm.GetRolesByUser")
    @ResponseWrapper(localName = "getRolesByUserResponse", targetNamespace = "http://ws.openkm.com", className = "okm.GetRolesByUserResponse")
    public List<String> getRolesByUser(
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "user", targetNamespace = "")
        String user)
        throws PrincipalAdapterException_Exception
    ;

    /**
     * 
     * @param token
     * @throws RepositoryException_Exception
     * @throws DatabaseException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "logout", targetNamespace = "http://ws.openkm.com", className = "okm.Logout")
    @ResponseWrapper(localName = "logoutResponse", targetNamespace = "http://ws.openkm.com", className = "okm.LogoutResponse")
    public void logout(
        @WebParam(name = "token", targetNamespace = "")
        String token)
        throws DatabaseException_Exception, RepositoryException_Exception
    ;

}
